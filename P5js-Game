let pemain;
let hero;
let koin;
let monster;
let entity;
let mapp;
let score = 0;
let maxTime = 250;
let timer = maxTime;
let buttons = [];
let mulai = false;
var w = 400;
var h = 400;
var border = 45;

function setup() {
  createCanvas(w, h);
  hero = new Hero(width/2, height/2);
  mapp = new Map(401,401);
  monster = new Monster(random(25, width-25), random(135, height-25));
   koin = new Koin(random(25, width-25), random(135, height-25));
  buttons.push(new Button(130, 23, (() => hero.speed += 1), "Level +1", 10));
  buttons.push(new Button(200, 23, (() => timer = maxTime = 180), "Time reset", 10));
  
}

function draw() {
  background('grey');
  textAlign(RIGHT)
  textSize(10)
  fill(0);
  fill(51);
  for(i=0;i<401;i++){
    
  mapp.Up();
  mapp.Down();
  mapp.Right();
  mapp.Left();
  mapp.Middle();
  }

if (keyIsPressed === true) {
    if (keyCode === UP_ARROW) {
      hero.moveUp();
  } else if (keyCode === DOWN_ARROW) {
      hero.moveDown();
  } else if (keyCode === LEFT_ARROW) {
      hero.moveLeft();
  } else if (keyCode === RIGHT_ARROW) {
      hero.moveRight();
  }
  }
  
  hero.increaseScore();
  
  if (monster.intersects(hero)) {
      mapp.gameOver();
  }
  
  hero.render();
  monster.render();
  koin.render();
  
  textAlign(LEFT, TOP);
  textSize(17);
  noStroke();
  fill(0);
  text("score :" , 22, 22)
  text(score, 80, 22);
  fill("FireBrick");
  rect(23, 40, 100, 18);
  fill("Orange");
  rect(23, 40, timer * 100 / maxTime, 18);
  for (const btn of buttons) {
    btn.render();
  }
  if (mulai) {
    timer--;
  }
  if (timer <= 0) {
    mapp.gameOver();
  }
}

class Entity{
  constructor(x,y,height,width){
      this.x = x;
      this.y = y;
      this.height=400;
      this.width=400;
  }
  
  attack(xdir, ydir) {
  this.pos.x += xdir * this.speed;  
  this.pos.y += ydir * this.speed;
  }
  
    render() {
    noStroke();
    fill("FireBrick");
    circle(this.pos.x, this.pos.y, this.r*2);
  }
  
  moveLeft(){
    if (this.pos.x-this.speed<border)
      this.pos.x=border;
    else
      this.pos.x-=this.speed;
      mulai = true;
  }
  moveRight(){
    if (this.pos.x+this.speed>w-border)
      this.pos.x=w-border;
    else
      this.pos.x+=this.speed;
      mulai = true;

  }
  moveUp(){
    if (this.pos.y-this.speed<border+105)
      this.pos.y=border+105;
    else
      this.pos.y-=this.speed;
      mulai = true;

  }
  moveDown(){
    if (this.pos.y+this.speed>h-border)
      this.pos.y=h-border;
    else
      this.pos.y+=this.speed;
      mulai = true;

  }
}

class Hero extends Entity{
    constructor(x,y,life,score){
    super(x,y)
    this.pos = createVector(x, y);
    this.r = 24;
    this.speed = 3;
    this.life = life;
    this.score = score;
    }
    jalan(){
      return this.move()
      return this.moveRight()
      return this.render()
      return this.moveLeft()
      return this.moveUp()
      return this.moveDown()
    }
    increaseScore(){
    if (koin.intersects(hero)) {
    koin.pos.set(random(25, width-26), random(135, height-26));
    score++;
    maxTime -= 6;
    timer = maxTime;
  }
  }

    calculateLife(life){
    this.life=life
  }
  
  saveScore(){
  text("Your Score Is:",200,290);
  text(score,275,290);
  }
  
}

class Koin  {
  constructor(x, y) {
    this.pos = createVector(x, y);
    this.r = 25;
  }
  
  intersects(hero) {
    return hero.pos.dist(this.pos) < hero.r + this.r;
  }
  
  render() {
    noStroke();
    fill("Orange");
    circle(this.pos.x, this.pos.y, this.r);
  }
}

class Button {
  constructor(x, y, action, name, price) {
    this.x = x;
    this.y = y;
    this.w = 60;
    this.h = 40;
    this.action = action;
    this.name = name;
    this.price = price;
  }
  
    intersects(x, y) {
    return x > this.x && x < this.x+this.w && y > this.y && y < this.y+this.h;
  }

    render() {
    noStroke();
    fill(255);
    if (mouseIsPressed && this.intersects(mouseX, mouseY)) {
      fill(238);
    }
    rect(this.x, this.y, this.w, this.h);
    textAlign(CENTER, CENTER);
    textSize(24);
    fill(0);
    text(round(this.price), this.x + this.w/2, this.y + this.h/2 + 5);
    textSize(12);
    text(this.name, this.x + this.w/2, this.y + 10);
  }
}


//Mengatur Border Mapnya
class Map{
  constructor(width, height){
    this.width = width
    this.height = height
 
  }
  
  Middle(){
     for(let i=0;i<this.width;i++){
     rect(i,107,1,19);
    }
  }
  
  Up(){
    for(let i=0;i<this.width;i++){
      rect(i,0,1,19);
    }
  }
  
  Left(){
    for(i=0;i<this.height;i++){
      rect(0,i,19,1);
    }
  }

  Right(){
    for(let i=0;i<this.height;i++){
      rect(381,i,19,1);
    }
  }

  Down(){
    for(let i=0;i<this.width;i++){
      rect(i,381,1,19);
    }
  
  
  }

gameOver(){
  noStroke();
  fill(0, 128);
  rect(0, 0, width, height);
  textAlign(CENTER, CENTER);
  textSize(55);
  fill('RED');
  text("GAME OVER", width/2, height/2);
  textSize(40);
  fill('RED');
  text("TRY AGAIN!",200,250);
  textSize(20);
  fill('Orange');
  hero.saveScore();
  noLoop();
  }
}
  

